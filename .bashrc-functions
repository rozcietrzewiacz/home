
##############>>>###>>>###>>>###>>>###>>>###>>>####
##############>>>###>>>###>>>###>>>###>>>###>>>####
############  >>> cp_p i mv_p
############      - funkcje pokazujące postęp kopiwania/przenoszenia
function cp_p () 
{ 
    strace -q -ewrite cp -- "${1}" "${2}" 2>&1 | awk '{
        count += $NF
            if (count % 10 == 0) {
               percent = count / total_size * 100
               printf "%3d%% [", percent
               for (i=0;i<=percent;i++)
                  printf "="
               printf ">"
               for (i=percent;i<100;i++)
                  printf " "
               printf "]\r"
            }
         }
         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}
##############
function mv_p () 
{ 
    strace -q -ewrite mv -- "${1}" "${2}" 2>&1 | awk '{
        count += $NF
            if (count % 10 == 0) {
               percent = count / total_size * 100
               printf "%3d%% [", percent
               for (i=0;i<=percent;i++)
                  printf "="
               printf ">"
               for (i=percent;i<100;i++)
                  printf " "
               printf "]\r"
            }
         }
         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

############# moja autorska funkcja listująca dyski usb
listusbdisks () 
{
    [[ "x$1" == "x-v" ]] && shift && local VERBOSE=-v
    for dsk in ${@-/dev/sd?}
    do
        /sbin/udevadm info --query=path --name="$dsk" | grep --colour=auto -q usb || continue
        echo "===== device $dsk is:"
        ( eval $(/sbin/udevadm info --query=property --name="$dsk" | grep "\(MODEL\|VENDOR\)_ID")
          [ "$ID_VENDOR_ID:$ID_MODEL_ID" == ":" ] && echo "Unknown" || \
	    lsusb $VERBOSE -d "$ID_VENDOR_ID:$ID_MODEL_ID" 
          /sbin/fdisk -l $dsk | grep --color=always "${dsk}[0-9]*"
	)
	grep -q "$dsk" /proc/mounts && echo "----- DEVICE IS MOUNTED ----" 
        echo
    done
}


##############
function spawn() {
	( "$@" & ) &> /dev/null
}

#############
showtime () 
{ 
    SEC="%S.%N"
    case "$1" in
        [hHaAfF]) # include (H)ours = (A)ll = (F)ull time
            HRS="%H:"
            MIN="%M:" ;;
        [mM]) 
            MIN="%M:" ;;
        [nN]) # only nanoseconds (sic!)
            SEC="%N" ;;
    esac
                
    while IFS= read -r line; do
        printf "\e[33m[ $( date +${HRS}${MIN}${SEC} ) ]\e[0m $line\n";
    done
}

##############
function gadaj() 
{ echo "$@" | sed "s/\.\{1,\}/,/g" | uconv -s -f "UTF-8" -t "ISO8859-2" | catspeech; }

##############
### BROKEN :( 
##from fgo:
#function gpo_search() 
#{ 
#	[[ "$1" && "$1" != "*[[:space:]]*" ]] && \
#	   curl -s "http://gentoo.zapto.org/packages/search?description=$1" | \
#	   html2text -nobs | awk '/results for query/ { i=1 }; (i && $1 != "[Home]") { print }'
#}
###############


fetchrep () 
{ 
    local REP="$(curl -s --compressed http://api.unix.stackexchange.com/1.1/users/9382/ | \
	    grep -o "\"reputation\": [0-9]*" | cut -d ' ' -f 2)"
    local STR="<b> rep:<span color=\\\""
    local LASTREP=""
    [[ "$REP" == "" ]] && return 1
    [[ -r /tmp/unix_lastrep ]] && read LASTREP < /tmp/unix_lastrep
    [[ "$REP" == "$LASTREP" ]] && STR="${STR}white\\\">" || STR="${STR}red\\\">"
    STR="${STR} ${REP} </span></b>"
    echo "mytextbox.text = \"$STR\"" | awesome-client
    echo "$REP" >| /tmp/unix_lastrep
}

#########################

# Create a new directory and enter it
function md() {
  [[ $# = 1 ]] && mkdir -p "$1" && cd "$1"
}
