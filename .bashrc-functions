
##############:::###:::###:::###:::###:::###:::####
##############:::###:::###:::###:::###:::###:::####
############  ::: cp_p i mv_p
############      - funkcje pokazujące postęp kopiwania/przenoszenia
function cp_p () 
{ 
    strace -q -ewrite cp -- "${1}" "${2}" 2>&1 | awk '{
        count += $NF
            if (count % 10 == 0) {
               percent = count / total_size * 100
               printf "%3d%% [", percent
               for (i=0;i<=percent;i++)
                  printf "="
               printf ">"
               for (i=percent;i<100;i++)
                  printf " "
               printf "]\r"
            }
         }
         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}
##############
function mv_p () 
{ 
    strace -q -ewrite mv -- "${1}" "${2}" 2>&1 | awk '{
        count += $NF
            if (count % 10 == 0) {
               percent = count / total_size * 100
               printf "%3d%% [", percent
               for (i=0;i<=percent;i++)
                  printf "="
               printf ">"
               for (i=percent;i<100;i++)
                  printf " "
               printf "]\r"
            }
         }
         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

############# moja autorska funkcja listująca dyski usb
listusbdisks () 
{
    [[ "x$1" == "x-v" ]] && shift && local VERBOSE=-v
    DYSKI=""
    for dsk in ${@-/dev/sd?}
    do
        /sbin/udevadm info --query=path --name="$dsk" | grep --colour=auto -q usb || continue
        echo -e "===== device \e[1m$dsk\e[0m is:"
        ( eval $(/sbin/udevadm info --query=property --name="$dsk" | grep "\(MODEL\|VENDOR\)_ID")
          [ "$ID_VENDOR_ID:$ID_MODEL_ID" == ":" ] && echo "Unknown" || \
	    lsusb $VERBOSE -d "$ID_VENDOR_ID:$ID_MODEL_ID" 
          /bin/lsblk -no NAME,SIZE,FSTYPE,MOUNTPOINT $dsk | sed "s/ \(\/[^ ]*$\)/ "$'\e[41m'"\1"$'\e[0m'"/"
	) && DYSKI="$DYSKI $dsk"
	#grep -q "$dsk" /proc/mounts && echo "----- DEVICE IS MOUNTED ----" 
        echo
    done
    if [[ "x$DYSKI" != "x" ]]; then
        montowalne=$( lsblk -no KNAME,FSTYPE $DYSKI | awk '{ if ($2 != "") print $1;}' )
        echo "Wybierz partycję do zamontowania:"
        select dysk in $montowalne "Anuluj montowanie"
        do
            [[ "$dysk" == "Anuluj montowanie" ]] && break
            pmount $dysk
            echo -n "$dysk mounted at "
            echo -n "/media/$dysk" | xclip -f 
            echo " (path coppied to clipboard)"
            break
        done
    fi
}


##############
function spawn() {
	( "$@" & ) &> /dev/null
}

#############
showtime () 
{ 
    SEC="%S.%N"
    case "$1" in
        [hHaAfF]) # include (H)ours = (A)ll = (F)ull time
            HRS="%H:"
            MIN="%M:" ;;
        [mM]) 
            MIN="%M:" ;;
        [nN]) # only nanoseconds (sic!)
            SEC="%N" ;;
    esac
                
    while IFS= read -r line; do
        printf "\e[33m[ $( date +${HRS}${MIN}${SEC} ) ]\e[0m $line\n";
    done
}

##############
function gadaj() 
{ echo "$@" | sed "s/\.\{1,\}/,/g" | uconv -s -f "UTF-8" -t "ISO8859-2" | catspeech; }

##############
### BROKEN :( 
##from fgo:
#function gpo_search() 
#{ 
#	[[ "$1" && "$1" != "*[[:space:]]*" ]] && \
#	   curl -s "http://gentoo.zapto.org/packages/search?description=$1" | \
#	   html2text -nobs | awk '/results for query/ { i=1 }; (i && $1 != "[Home]") { print }'
#}
###############


fetchrep () 
{ 
    local REP="$(curl -s --compressed http://api.unix.stackexchange.com/1.1/users/9382/ | \
	    grep -o "\"reputation\": [0-9]*" | cut -d ' ' -f 2)"
    local STR="<b> rep:<span color=\\\""
    local LASTREP=""
    [[ "$REP" == "" ]] && return 1
    [[ -r /tmp/unix_lastrep ]] && read LASTREP < /tmp/unix_lastrep
    [[ "$REP" == "$LASTREP" ]] && STR="${STR}white\\\">" || STR="${STR}red\\\">"
    STR="${STR} ${REP} </span></b>"
    echo "mytextbox.text = \"$STR\"" | awesome-client
    echo "$REP" >| /tmp/unix_lastrep
}
#### 
#### Przypomnienie odpalane przy wejściu do katalogu
### źródło: http://unix.stackexchange.com/questions/18532/show-message-when-cd-into-specific-directory/18533#18533
reminder_cd() 
{
    cd $@ && [ -f ".cd-reminder" ] && cat .cd-reminder
}
#użycie: alias cd="reminder_cd"

function dotcl-switch
{
    if [[ $# = 0 ]]; then
        cat << EOM
    usage: $0 <dotcloud_account_name>
    available accounts:
$( find ~/.dotcloud/ACC -mindepth 1 -maxdepth 1 -type d -exec basename {} \; )
EOM
    else
        [[ -d ~/.dotcloud/ACC/$1 ]] && echo "Switching to $1" && \
        rm ~/.dotcloud/dotcloud* && cp -vf ~/.dotcloud/ACC/$1/dotcloud* ~/.dotcloud/
    fi
}
##########################
### Short, handy ones: ###

psg () ## a handy semi-alias
{ ps aux | grep $*; }

md() # Create a new directory and enter it
{  [[ $# = 1 ]] && mkdir -p "$1" && cd "$1"; }

